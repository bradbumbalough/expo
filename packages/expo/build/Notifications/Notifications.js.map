{"version":3,"file":"Notifications.js","sourceRoot":"","sources":["../../src/Notifications/Notifications.ts"],"names":[],"mappings":"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","sourcesContent":["import Constants from 'expo-constants';\nimport { EventEmitter, EventSubscription } from 'fbemitter';\nimport invariant from 'invariant';\nimport { AsyncStorage, Platform } from 'react-native';\nimport DeviceEventEmitter from 'react-native/Libraries/EventEmitter/RCTDeviceEventEmitter';\nimport { UnavailabilityError } from '@unimodules/core';\nimport ExponentNotifications from './ExponentNotifications';\nimport { Mailbox } from './Mailbox';\nimport {\n  Notification,\n  LocalNotification,\n  Channel,\n  ActionType,\n  LocalNotificationId,\n  UserInteraction,\n  OnUserInteractionListener,\n  OnForegroundNotificationListener,\n} from './Notifications.types';\n\nconst _mailbox: Mailbox = new Mailbox();\n\nfunction _processNotification(notification) {\n  notification = Object.assign({}, notification);\n\n  if (!notification.data) {\n    notification.data = {};\n  }\n\n  if (notification.hasOwnProperty('count')) {\n    delete notification.count;\n  }\n\n  // Delete any Android properties on iOS and merge the iOS properties on root notification object\n  if (Platform.OS === 'ios') {\n    if (notification.android) {\n      delete notification.android;\n    }\n\n    if (notification.ios) {\n      notification = Object.assign(notification, notification.ios);\n      delete notification.ios;\n    }\n  }\n\n  // Delete any iOS properties on Android and merge the Android properties on root notification\n  // object\n  if (Platform.OS === 'android') {\n    if (notification.ios) {\n      delete notification.ios;\n    }\n\n    if (notification.android) {\n      notification = Object.assign(notification, notification.android);\n      delete notification.android;\n    }\n  }\n\n  return notification;\n}\n\nfunction _validateNotification(notification) {\n  if (Platform.OS === 'ios') {\n    invariant(\n      !!notification.title && !!notification.body,\n      'Local notifications on iOS require both a title and a body'\n    );\n  } else if (Platform.OS === 'android') {\n    invariant(!!notification.title, 'Local notifications on Android require a title');\n  }\n}\n\nlet ASYNC_STORAGE_PREFIX = '__expo_internal_channel_';\n\nasync function _legacyReadChannel(id: string): Promise<Channel | null> {\n  try {\n    let channelString = await AsyncStorage.getItem(`${ASYNC_STORAGE_PREFIX}${id}`);\n    if (channelString) {\n      return JSON.parse(channelString);\n    }\n  } catch (e) {}\n  return null;\n}\n\nfunction _legacyDeleteChannel(id: string): Promise<void> {\n  return AsyncStorage.removeItem(`${ASYNC_STORAGE_PREFIX}${id}`);\n}\n\nif (Platform.OS === 'android') {\n  AsyncStorage.clear = async function(callback?: (error?: Error) => void): Promise<void> {\n    try {\n      let keys = await AsyncStorage.getAllKeys();\n      let result = null;\n      if (keys && keys.length) {\n        let filteredKeys = keys.filter(key => !key.startsWith(ASYNC_STORAGE_PREFIX));\n        await AsyncStorage.multiRemove(filteredKeys);\n      }\n      callback && callback();\n    } catch (e) {\n      callback && callback(e);\n      throw e;\n    }\n  };\n}\n\n  // User passes set of actions titles.\nexport function createCategoryAsync(categoryId: string, actions: ActionType[]): Promise<void> {\n  return ExponentNotifications.createCategoryAsync(categoryId, actions);\n}\n\nexport function deleteCategoryAsync(categoryId: string): Promise<void> {\n  return ExponentNotifications.deleteCategoryAsync(categoryId);\n}\n\n  /* Re-export */\nexport function getExpoPushTokenAsync(): Promise<string> {\n  if (!ExponentNotifications.getExponentPushTokenAsync) {\n    throw new UnavailabilityError('Expo.Notifications', 'getExpoPushTokenAsync');\n  }\n  if (!Constants.isDevice) {\n    throw new Error(`Must be on a physical device to get an Expo Push Token`);\n  }\n  return ExponentNotifications.getExponentPushTokenAsync();\n}\n\nexport async function getDevicePushTokenAsync(config: {\n  gcmSenderId?: string;\n}): Promise<{ type: string; data: string }> {\n  if (!ExponentNotifications.getDevicePushTokenAsync) {\n    throw new UnavailabilityError('Expo.Notifications', 'getDevicePushTokenAsync');\n  }\n  return ExponentNotifications.getDevicePushTokenAsync(config || {});\n}\n\nexport function createChannelAndroidAsync(id: string, channel: Channel): Promise<void> {\n  if (Platform.OS !== 'android') {\n    console.warn(`createChannelAndroidAsync(...) has no effect on ${Platform.OS}`);\n    return Promise.resolve();\n  }\n  return ExponentNotifications.createChannel(id, channel);\n}\n\nexport function deleteChannelAndroidAsync(id: string): Promise<void> {\n  if (Platform.OS !== 'android') {\n    console.warn(`deleteChannelAndroidAsync(...) has no effect on ${Platform.OS}`);\n    return Promise.resolve();\n  }\n  return ExponentNotifications.deleteChannel(id);\n}\n\n  /* Shows a notification instantly */\nexport async function presentLocalNotificationAsync(\n  notification: LocalNotification\n): Promise<LocalNotificationId> {\n  _validateNotification(notification);\n  let nativeNotification = _processNotification(notification);\n\n  if (Platform.OS !== 'android') {\n    return await ExponentNotifications.presentLocalNotification(nativeNotification);\n  } else {\n    let _channel;\n    if (nativeNotification.channelId) {\n      _channel = await _legacyReadChannel(nativeNotification.channelId);\n    }\n\n    // delete the legacy channel from AsyncStorage so this codepath isn't triggered anymore\n    _legacyDeleteChannel(nativeNotification.channelId);\n    return ExponentNotifications.presentLocalNotificationWithChannel(\n      nativeNotification,\n      _channel\n    );\n  }\n}\n\n/* Schedule a notification at a later date */\nexport async function scheduleLocalNotificationAsync(\n  notification: LocalNotification,\n  options: {\n    time?: Date | number;\n    repeat?: 'minute' | 'hour' | 'day' | 'week' | 'month' | 'year';\n    intervalMs?: number;\n  } = {}\n): Promise<LocalNotificationId> {\n  // set now at the beginning of the method, to prevent potential weird warnings when we validate\n  // options.time later on\n  const now = Date.now();\n\n  // Validate and process the notification data\n  _validateNotification(notification);\n  let nativeNotification = _processNotification(notification);\n\n  // Validate `options.time`\n  if (options.time) {\n    let timeAsDateObj: Date | null = null;\n    if (options.time && typeof options.time === 'number') {\n      timeAsDateObj = new Date(options.time);\n      if (timeAsDateObj.toString() === 'Invalid Date') {\n        timeAsDateObj = null;\n      }\n    } else if (options.time && options.time instanceof Date) {\n      timeAsDateObj = options.time;\n    }\n\n    // If we couldn't convert properly, throw an error\n    if (!timeAsDateObj) {\n      throw new Error(\n        `Provided value for \"time\" is invalid. Please verify that it's either a number representing Unix Epoch time in milliseconds, or a valid date object.`\n      );\n    }\n\n    // If someone passes in a value that is too small, say, by an order of 1000 (it's common to\n    // accidently pass seconds instead of ms), display a warning.\n    if (timeAsDateObj.getTime() < now) {\n      console.warn(\n        `Provided value for \"time\" is before the current date. Did you possibly pass number of seconds since Unix Epoch instead of number of milliseconds?`\n      );\n    }\n\n    options = {\n      ...options,\n      time: timeAsDateObj.getTime(),\n    };\n  }\n\n  if (options.intervalMs != null && options.repeat != null) {\n    throw new Error(`Pass either the \"repeat\" option or \"intervalMs\" option, not both`);\n  }\n\n  // Validate options.repeat\n  if (options.repeat != null) {\n    const validOptions = new Set(['minute', 'hour', 'day', 'week', 'month', 'year']);\n    if (!validOptions.has(options.repeat)) {\n      throw new Error(\n        `Pass one of ['minute', 'hour', 'day', 'week', 'month', 'year'] as the value for the \"repeat\" option`\n      );\n    }\n  }\n\n  if (options.intervalMs != null) {\n    if (Platform.OS === 'ios') {\n      throw new Error(`The \"intervalMs\" option is not supported on iOS`);\n    }\n\n    if (options.intervalMs <= 0 || !Number.isInteger(options.intervalMs)) {\n      throw new Error(\n        `Pass an integer greater than zero as the value for the \"intervalMs\" option`\n      );\n    }\n  }\n\n  if (Platform.OS !== 'android') {\n    if (options.repeat) {\n      console.warn(\n        'Ability to schedule an automatically repeated notification is deprecated on iOS and will be removed in the next SDK release.'\n      );\n      return ExponentNotifications.legacyScheduleLocalRepeatingNotification(\n        nativeNotification,\n        options\n      );\n    }\n\n    return ExponentNotifications.scheduleLocalNotification(nativeNotification, options);\n  } else {\n    let _channel;\n    if (nativeNotification.channelId) {\n      _channel = await _legacyReadChannel(nativeNotification.channelId);\n    }\n\n    // delete the legacy channel from AsyncStorage so this codepath isn't triggered anymore\n    _legacyDeleteChannel(nativeNotification.channelId);\n    return ExponentNotifications.scheduleLocalNotificationWithChannel(\n      nativeNotification,\n      options,\n      _channel\n    );\n  }\n}\n\n  /* Dismiss currently shown notification with ID (Android only) */\nexport async function dismissNotificationAsync(notificationId: LocalNotificationId): Promise<void> {\n  if (!ExponentNotifications.dismissNotification) {\n    throw new UnavailabilityError('Expo.Notifications', 'dismissNotification');\n  }\n  return await ExponentNotifications.dismissNotification(notificationId);\n}\n\n  /* Dismiss all currently shown notifications (Android only) */\nexport async function dismissAllNotificationsAsync(): Promise<void> {\n  if (!ExponentNotifications.dismissAllNotifications) {\n    throw new UnavailabilityError('Expo.Notifications', 'dismissAllNotifications');\n  }\n  return await ExponentNotifications.dismissAllNotifications();\n}\n\n  /* Cancel scheduled notification notification with ID */\nexport function cancelScheduledNotificationAsync(notificationId: LocalNotificationId): Promise<void> {\n  return ExponentNotifications.cancelScheduledNotificationAsync(notificationId);\n}\n\n  /* Cancel all scheduled notifications */\nexport function cancelAllScheduledNotificationsAsync(): Promise<void> {\n  return ExponentNotifications.cancelAllScheduledNotificationsAsync();\n}\n\nexport async function setBadgeNumberAsync(number: number): Promise<void> {\n  if (!ExponentNotifications.setBadgeNumberAsync) {\n    throw new UnavailabilityError('Expo.Notifications', 'setBadgeNumberAsync');\n  }\n  return ExponentNotifications.setBadgeNumberAsync(number);\n}\n\nexport function addOnUserInteractionListener(listenerName: string, listener: OnUserInteractionListener) {\n  _mailbox.addOnUserInteractionListener(listenerName, listener);\n}\n\nexport function addOnForegroundNotificationListener(listenerName: string, listener: OnForegroundNotificationListener) {\n  _mailbox.addOnForegroundNotificationListener(listenerName, listener);\n}\n\nexport function removeOnUserInteractionListener(listenerName: string) {\n  _mailbox.removeOnUserInteractionListener(listenerName);\n}\n\nexport function removeOnForegroundNotificationListener(listenerName: string) {\n  _mailbox.removeOnForegroundNotificationListener(listenerName);\n}\n"]}